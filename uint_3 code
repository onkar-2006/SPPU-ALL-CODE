/*///code for the fuction overloading and compile time polymorphism
#include<iostream>
using namespace  std; 
int add(int a , int b){
    return a+b;
}
float add(float a ,float b){
    return a+b;
}
int main(){
    cout<<"the sum of int "<<add(3,4)<<endl;
    cout<<"the sum of float "<<add(2.5f, 3.5f)<<endl;
}
*/
/*
//code2 
#include<iostream>
using namespace std;
class Animal
{
    public:
    virtual void sound(){
        cout<<"the animal make a sound";
    }
};
class Dog : public Animal{
    public:
    void sound()override{
        cout<<"the dog barks";
    }
};
int main(){
    Animal* animalptr;
    
    Dog dog;
    
    animalptr= &dog;
    animalptr->sound();
    return 0;
}
*/
//code3
/*
#include<iostream>
using namespace std ;

class Test {
    public:
    int a=5;
    mutable int b=6 ;
    void change()const{
        a = a+10;
        b=b+20;
    }
    void display(){
        cout<<"the value  of a"<<a<<endl;
        cout<<"the value of b"<<b<<endl;
    }
};
int main()
{
    Test t1 ;
    t1.change();
    t1.display();
}
/tmp/DvY2nw9Rr8.cpp: In member function 'void Test::change() const':
/tmp/DvY2nw9Rr8.cpp:50:11: error: assignment of member 'Test::a' in read-only object
   50 |         a = a+10;
      |         ~~^~~~~~
-> the error is due to the int a is an const it can not change but we define the b as mutable so that can not change
*/
//type conversion
/*
#include<iostream>
using namespace std ;
class Test
{
    public:
    operator int();
};
Test::operator int(){
        int sum ;
        sum=5 ;
        return sum;
        
    }
int main(){
    Test obj;
    int x;
    x=10 ;
    cout<<"the value of x"<<x<<endl;
    x=int(obj);
    cout<<"the value assing by the class"<<x<<endl;
    return 0;
}
the value of x10
the value assing by the class5
*/
//code 7 explite constructor
/*#include<iostream>
using namespace std ;
class Test {
    public:
    int val;
    explicit Test(int x):val(x)
   { cout<<"the val"<<val;}
};
int main(){
    Test obj=100;
    return 0;
}
/tmp/7hW0uho9Nz.cpp: In function 'int main()':
/tmp/7hW0uho9Nz.cpp:108:14: error: conversion from 'int' to non-scalar type 'Test' requested
  108 |     Test obj=100;
      |              ^~~
*/

//code 8- pure virtual fuxtion
/*
#include <iostream>
using namespace std;

class base {
public:
    virtual void display() = 0; // Pure virtual function
};

class derived : public base {
public:
    void display() override { // Overriding the pure virtual function
        cout << "\nThe derived class function" << endl;
    }
};

int main() {
    base* ptr;          // Pointer of type base
    derived obj;        // Object of derived class
    ptr = &obj;         // Point base pointer to derived object
    ptr->display();     // Call derived class function through base class pointer
    return 0;
}*/
//code 9-virtual distructor
class Base
{
    public:
    Base(){
        cout <<"inside the base class";
    }
      ~Base(){
          cout<<"insdie the derived class";
      }
};
class Derived :public Base{
    public:
    Derived(){
        cout<<"inside the derived class constructor"<<endl
    }
    ~Derived(){
        cout<<"inside the drived class distructor"<<endl;

    }
};
int main(){
    Base *obj=new Derived();
    delete obj;
}
